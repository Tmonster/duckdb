diff --git a/src/include/storage/postgres_table_entry.hpp b/src/include/storage/postgres_table_entry.hpp
index d96dfad..6279076 100644
--- a/src/include/storage/postgres_table_entry.hpp
+++ b/src/include/storage/postgres_table_entry.hpp
@@ -46,6 +46,8 @@ public:
 public:
 	unique_ptr<BaseStatistics> GetStatistics(ClientContext &context, column_t column_id) override;
 
+	optional_ptr<BlockingSample> GetSample() override;
+
 	TableFunction GetScanFunction(ClientContext &context, unique_ptr<FunctionData> &bind_data) override;
 
 	TableStorageInfo GetStorageInfo(ClientContext &context) override;
diff --git a/src/storage/postgres_table_entry.cpp b/src/storage/postgres_table_entry.cpp
index d791678..93caa7b 100644
--- a/src/storage/postgres_table_entry.cpp
+++ b/src/storage/postgres_table_entry.cpp
@@ -3,6 +3,7 @@
 #include "storage/postgres_transaction.hpp"
 #include "duckdb/storage/statistics/base_statistics.hpp"
 #include "duckdb/storage/table_storage_info.hpp"
+#include "duckdb/execution/reservoir_sample.hpp"
 #include "postgres_scanner.hpp"
 
 namespace duckdb {
@@ -31,6 +32,10 @@ unique_ptr<BaseStatistics> PostgresTableEntry::GetStatistics(ClientContext &cont
 	return nullptr;
 }
 
+optional_ptr<BlockingSample> PostgresTableEntry::GetSample() {
+	return nullptr;
+}
+
 void PostgresTableEntry::BindUpdateConstraints(LogicalGet &, LogicalProjection &, LogicalUpdate &, ClientContext &) {
 }
 
@@ -61,6 +66,7 @@ TableFunction PostgresTableEntry::GetScanFunction(ClientContext &context, unique
 	return function;
 }
 
+
 TableStorageInfo PostgresTableEntry::GetStorageInfo(ClientContext &context) {
 	auto &transaction = Transaction::Get(context, catalog).Cast<PostgresTransaction>();
 	auto &db = transaction.GetConnection();

# name: test/optimizer/pushdown/test_pushdown_filters_into_delim_join.test
# description: Push filters into delim joins.
# group: [pushdown]

statement ok
create table posts as from values
(1, ['r'], '2022-12-01T00:00:00.000Z'::TIMESTAMPTZ),
(2, ['c++'], '2023-01-03T00:00:00.000Z'::TIMESTAMPTZ),
(3, ['python'], '2023-01-04T00:00:00.000Z'::TIMESTAMPTZ),
(4, ['r', 'stats'], '2023-01-05T00:00:00.000Z'::TIMESTAMPTZ),
(5, ['python', 'r'], '2023-03-02T00:00:00.000Z'::TIMESTAMPTZ),
(6, ['python', 'r'], '2023-03-04T00:00:00.000Z'::TIMESTAMPTZ),
(7, ['r'], '2023-03-08T00:00:00.000Z'::TIMESTAMPTZ),
(8, ['c++'], '2023-03-13T00:00:00.000Z'::TIMESTAMPTZ),
 (8, ['c++'], '2023-05-13T00:00:00.000Z'::TIMESTAMPTZ) t(Id, Tags, CreationDate);

query II
SELECT
    (t0."Tags") AS "Tags",
    (COUNT(Id)) AS "total_posts_measure"
FROM posts, LATERAL UNNEST("Tags") t0("Tags")
WHERE ("CreationDate" >= '2023-01-01T00:00:00.000Z' AND "CreationDate" < '2023-04-01T00:00:00.000Z')
GROUP BY 1
ORDER BY "total_posts_measure" DESC NULLS LAST LIMIT 8;
----
r	4
python	3
c++	2
stats	1

statement ok
pragma explain_output='optimized_only';

# filter is pushded below the right delim join
query II
explain SELECT
(t0."Tags") AS "Tags",
(COUNT(Id)) AS "total_posts_measure"
FROM posts, LATERAL UNNEST("Tags") t0("Tags")
WHERE ("CreationDate" >= '2023-01-01T00:00:00.000Z' AND "CreationDate" < '2023-04-01T00:00:00.000Z')
GROUP BY 1
ORDER BY "total_posts_measure" DESC NULLS LAST LIMIT 8;
----
logical_opt	<REGEX>:.*DELIM_JOIN.*FILTER.*


# filter is pushed below the right delim join, and is not duplicated above it as well.
query II
explain SELECT
(t0."Tags") AS "Tags",
(COUNT(Id)) AS "total_posts_measure"
FROM posts, LATERAL UNNEST("Tags") t0("Tags")
WHERE ("CreationDate" >= '2023-01-01T00:00:00.000Z' AND "CreationDate" < '2023-04-01T00:00:00.000Z')
GROUP BY 1
ORDER BY "total_posts_measure" DESC NULLS LAST LIMIT 8;
----
logical_opt	<!REGEX>:.*FILTER.*DELIM_JOIN.*FILTER.*